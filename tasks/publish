#!/usr/bin/env bash
self=$(readlink -f $0); tasks=`dirname ${self}`; projectRoot=`dirname ${tasks}`;

GID=`id -g`; NEW_TAG=`date +%Y.%m.%d`;

# Grab version info for the various pieces of software
echo "Reading software versions from built containers...";
DOTNET_V=`docker run --rm -e HOST_USER_ID=$UID -e HOST_GROUP_ID=$GID bradjones/dotnet:latest dotnet | sed '/^Microsoft/, /Build/!d'`;
DOTNET_INFO=`docker run --rm -e HOST_USER_ID=$UID -e HOST_GROUP_ID=$GID bradjones/dotnet:latest dotnet --info`;
NODE_V=`docker run --rm -e HOST_USER_ID=$UID -e HOST_GROUP_ID=$GID bradjones/dotnet-ide:latest node -v`;
TYPESCRIPT_V=`docker run --rm -e HOST_USER_ID=$UID -e HOST_GROUP_ID=$GID bradjones/dotnet-ide:latest tsc -v`;
RIDER_V=`docker run --rm -e HOST_USER_ID=$UID -e HOST_GROUP_ID=$GID bradjones/dotnet-rider:latest cat /opt/rider/build.txt`;
VSCODE_V=`docker run --rm -e HOST_USER_ID=$UID -e HOST_GROUP_ID=$GID bradjones/dotnet-vscode:latest code --version`;

# Build a release description to send to github
NEW_RELEASE_NOTES="__dotnet version info__"$'\n\n'"\`\`\`$DOTNET_V"$'\n'"\`\`\`"$'\n\n';
NEW_RELEASE_NOTES="$NEW_RELEASE_NOTES __dotnet cli version info__"$'\n\n'"\`\`\`"$'\n'"$DOTNET_INFO"$'\n'"\`\`\`"$'\n\n';
NEW_RELEASE_NOTES="$NEW_RELEASE_NOTES __nodejs version info__"$'\n\n'"\`\`\`"$'\n'"$NODE_V"$'\n'"\`\`\`"$'\n\n';
NEW_RELEASE_NOTES="$NEW_RELEASE_NOTES __typescript version info__"$'\n\n'"\`\`\`"$'\n'"$TYPESCRIPT_V"$'\n'"\`\`\`"$'\n\n';
NEW_RELEASE_NOTES="$NEW_RELEASE_NOTES __rider version info__"$'\n\n'"\`\`\`"$'\n'"$RIDER_V"$'\n'"\`\`\`"$'\n\n';
NEW_RELEASE_NOTES="$NEW_RELEASE_NOTES __vscode version info__"$'\n\n'"\`\`\`"$'\n'"$VSCODE_V"$'\n'"\`\`\`"$'\n\n';

# Compare the last release notes to the ones we just generated, if they are the same we will abort this publish.
CURRENT_RELEASE_NOTES=`./bin/linux/amd64/github-release info --user brad-jones --repo dotnet-container --json | jq -r '.Releases[0].body'`;
CURRENT_RELEASE_HASH=`echo -n -e "$CURRENT_RELEASE_NOTES"$'\n\n' | md5sum | awk '{print $1}'`;
NEW_RELEASE_HASH=`echo -n "$NEW_RELEASE_NOTES" | md5sum | awk '{print $1}'`;
if [ "$CURRENT_RELEASE_HASH" == "$NEW_RELEASE_HASH" ]; then
    exit 1;
fi

# Push the images to docker hub
docker push bradjones/dotnet;
docker push bradjones/dotnet-ide;
docker push bradjones/dotnet-vscode;
docker push bradjones/dotnet-rider;

# Push a new tag for the current day
git config --global user.email "brad@bjc.id.au"
git config --global user.name "Brad Jones"
git checkout master
git tag $NEW_TAG
git push https://$GITHUB_TOKEN@github.com/brad-jones/dotnet-container.git master --tags

# Create a new release
echo "$NEW_RELEASE_NOTES" | ./bin/linux/amd64/github-release release \
    --user brad-jones \
    --repo dotnet-container \
    --tag $NEW_TAG \
    --description -

# Replace the ":latest" tag in the pseudo binary scripts with the new release.
sed -i "s/:latest/:$NEW_TAG/g" ./bin/dotnet
sed -i "s/:latest/:$NEW_TAG/g" ./bin/rider
sed -i "s/:latest/:$NEW_TAG/g" ./bin/code

# Upload the pseudo binary scripts to the release.
./bin/linux/amd64/github-release upload \
    --user brad-jones \
    --repo dotnet-container \
    --tag `date +%Y.%m.%d` \
    --name "dotnet.sh" \
    --file ./bin/dotnet

./bin/linux/amd64/github-release upload \
    --user brad-jones \
    --repo dotnet-container \
    --tag `date +%Y.%m.%d` \
    --name "rider.sh" \
    --file ./bin/rider

./bin/linux/amd64/github-release upload \
    --user brad-jones \
    --repo dotnet-container \
    --tag `date +%Y.%m.%d` \
    --name "code.sh" \
    --file ./bin/code