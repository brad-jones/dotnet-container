#!/usr/bin/env bash

# We want to run the container & automtically remove it after it has stopped.
CMD="docker run --rm";

# We run a privileged container to have a better experience with Chromium.
# Chromium is used when we open URL's from the IDE. Ideally I would like to
# just bind mount one of the hosts already installed browsers but so far I have
# not had much success getting this to work.
CMD="$CMD --privileged"

# Make the container run in the background. This provides a similar experience
# to how editors like vscode normally background the main editor process once
# it is spawned from the CLI however it does mean calls to other functionality
# provided by the main IDE binary will either fail or appear to fail as you
# won't see any output.
CMD="$CMD -d"

# Setup the container to run as the same user as our host system.
CMD="$CMD -e HOST_USER_ID=`id -u` -e HOST_GROUP_ID=`id -g` -v $HOME:/home/user";

# Ensure the working directory inside the container is the same as it is
# on the host system, obviously this is restricted to with-in /home.
pwd=`pwd`; CMD="$CMD -w ${pwd/$USER/user}";

# Mount the hosts X11 socket into the container,
# allowing vscode to display on our host.
CMD="$CMD -v /tmp/.X11-unix/:/tmp/.X11-unix/ -e DISPLAY"

# Give the container direct access to the hosts shared memory.
# I believe this makes things just run more efficently.
CMD="$CMD -v /dev/shm:/dev/shm"

# Make the container use the hosts network stack. This will ensure any web
# applications that are run inside the container can easily be accessed from
# the host.
CMD="$CMD --net host"

# Run the approriate tagged container.
CMD="$CMD bradjones/dotnet-rider:latest";

# Execute rider inside the container
# Proxying all other arguments on to rider
CMD="$CMD /opt/rider/bin/rider.sh $@"

# Finally execute the built command.
$CMD